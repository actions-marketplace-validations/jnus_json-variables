name: ci
  
on: [push, workflow_dispatch]

jobs:
  unit-test:
    runs-on: ubuntu-latest
    environment: Dev
    steps:
    - uses: actions/checkout@v2

    - name: test
      shell: pwsh
      run: | 
        Import-Module './src/JsonVariables.psm1' -Force

        $secrets = '{ "github_token": "ghs_r3LabcthiSisnoTAvaliDtokEN01abcd", "REPO_SECRET_A": "repo_secret_a" }'
        $configFile = Join-Path -Path './test/' -ChildPath 'variables.minimal.json'
        $result = Set-JsonVariables -scope 'Dev' -configFile $configFile -secrets $secrets
        write-host "---------------before-----------------"
        $result | format-table
        write-host "---------------after------------------"
        
        ./test/run.ps1
    
    - name: print
      run: env
    
    - name: unit-test-log
      shell: pwsh
      run: Get-Content pester.log
    
  test-action-minimal-dev:
    needs: unit-test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    environment: Dev
    steps:
    - uses: actions/checkout@v2

    - name: Set environment specific variables
      uses: jnus/json-variables@main
      with:
        scope: Dev
        configFile: 'variables.minimal.json'
        secrets: '${{ toJson(secrets) }}'
    
    - name: Print
      run: env

    - name: Assert
      shell: pwsh
      run: |
        $here = Split-Path $MyInvocation.MyCommand.Definition
        $path = Join-Path -Path ./ -ChildPath 'test'
        $module = Join-Path -Path $path -ChildPath 'Assertion.psm1'
        Import-Module $module -Force
        Assert-EnvVar -actual ${{env.Url}} -expected 'https://someDevHostName.com' -envVar "env.Url"
        Assert-EnvVar -actual ${{env.HostName}} -expected 'someDevHostName' -envVar "env.HostName"
  
  test-action-minimal-devtest:
    needs: unit-test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    environment: DevTest
    steps:
    - uses: actions/checkout@v2

    - name: Set environment specific variables
      uses: jnus/json-variables@main
      with:
        scope: DevTest
        configFile: 'test/variables.minimal.json'
        secrets: '${{ toJson(secrets) }}'   
    
    - name: Print
      run: env

    - name: Assert
      shell: pwsh
      run: |
        $here = Split-Path $MyInvocation.MyCommand.Definition
        $path = Join-Path -Path ./ -ChildPath 'test'
        $module = Join-Path -Path $path -ChildPath 'Assertion.psm1'
        Import-Module $module -Force
        Assert-EnvVar -actual '${{env.Url}}' -expected 'https://someDevTestHostName.com' -envVar "env.Url"
        Assert-EnvVar -actual '${{env.HostName}}' -expected 'someDevTestHostName' -envVar "env.HostName"
        Assert-EnvVar -actual '${{env.SecretA}}' -expected 'repo_secret_a' -envVar "env.SecretA"
        Assert-EnvVar -actual '${{env.ConnectionString}}' -expected 'username=user;password=repo_secret_a' -envVar "env.ConnectionString"
  